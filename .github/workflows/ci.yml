name: CI/CD

on:
  push:
    branches: [ main, develop ]
    tags:
      - 'v*'
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  PYTHON_VERSION: '3.11'

jobs:
  lint:
    name: Lint & Code Quality
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/pip
          ~/.cache/pre-commit
        key: ${{ runner.os }}-lint-${{ hashFiles('**/*.py', '**/pyproject.toml', '**/setup.py') }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"
    
    - name: Run linters
      run: |
        black --check turbodrf/ tests/
        isort --check-only turbodrf/ tests/
        flake8 turbodrf/ tests/

  test:
    name: Test Python ${{ matrix.python-version }} - Django ${{ matrix.django-version }}
    runs-on: ubuntu-latest
    needs: lint
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11", "3.12"]
        django-version: ["3.2", "4.0", "4.1", "4.2", "5.0"]
        exclude:
          - python-version: "3.8"
            django-version: "5.0"
          - python-version: "3.9"
            django-version: "5.0"
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-test-${{ matrix.python-version }}-${{ hashFiles('**/pyproject.toml', '**/setup.py') }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install django~=${{ matrix.django-version }}.0
        pip install -e ".[dev]"
    
    - name: Run tests
      run: |
        pytest -v --cov=turbodrf --cov-report=xml --cov-report=term
    
    - name: Upload coverage
      if: matrix.python-version == '3.11' && matrix.django-version == '4.2'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml

  build:
    name: Build Package
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install build tools
      run: |
        python -m pip install --upgrade pip
        pip install build twine
    
    - name: Build distributions
      run: python -m build
    
    - name: Check distributions
      run: |
        twine check dist/*
        ls -la dist/
    
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: distributions
        path: dist/

  release:
    name: Release to PyPI
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        name: distributions
        path: dist/
    
    - name: Publish to Test PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        password: ${{ secrets.TEST_PYPI_API_TOKEN }}
        repository-url: https://test.pypi.org/legacy/
        skip-existing: true
    
    - name: Test installation from Test PyPI
      run: |
        python -m pip install --index-url https://test.pypi.org/simple/ --extra-index-url https://pypi.org/simple/ turbodrf
    
    - name: Publish to PyPI
      if: success()
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        password: ${{ secrets.PYPI_API_TOKEN }}
    
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        files: dist/*
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}